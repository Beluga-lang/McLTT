From Coq Require Import Relation_Definitions RelationClasses.
From Mcltt Require Import Base LibTactics.
From Mcltt.Core Require Import System.Definitions Evaluation Readback PER.Definitions.
From Mcltt Require Export Domain.
From Mcltt.Core.Soundness Require Export Weakening.

Import Domain_Notations.
Global Open Scope predicate_scope.

Generalizable All Variables.

Notation "'typ_pred'" := (predicate (Tcons typ Tnil)).
Notation "'glu_pred'" := (predicate (Tcons exp (Tcons typ (Tcons domain Tnil)))).

Definition univ_typ_pred Œì j i : typ_pred := fun T => {{ Œì ‚ä¢ T ‚âà Type@j :  Type@i }}.

Inductive glu_nat : ctx -> exp -> domain -> Prop :=
| glu_nat_zero :
  `( {{ Œì ‚ä¢ m ‚âà zero : ‚Ñï }} ->
     glu_nat Œì m d{{{ zero }}} )
| glu_nat_succ :
  `( {{ Œì ‚ä¢ m ‚âà succ m' : ‚Ñï }} ->
     glu_nat Œì m' a ->
     glu_nat Œì m d{{{ succ a }}} )
| glu_nat_neut :
  `( per_bot c c ->
     (forall {Œî œÉ v}, {{ Œî ‚ä¢w œÉ : Œì }} -> {{ Rne c in length Œî ‚Üò v }} -> {{ Œî ‚ä¢ m [ œÉ ] ‚âà v : ‚Ñï }}) ->
     (* need to define weakenings *)
     glu_nat Œì m d{{{ ‚áë ‚Ñï c }}} ).

Definition nat_typ_pred Œì i : typ_pred := fun M => {{ Œì ‚ä¢ M ‚âà ‚Ñï :  Type@i }}.

Definition nat_glu_pred Œì i : glu_pred := fun m M a => nat_typ_pred Œì i M /\ glu_nat Œì m a.

Definition neut_typ_pred Œì i (C C' : domain_ne) : typ_pred :=
  fun M => {{ Œì ‚ä¢ M : Type@i }} /\
          (forall Œî œÉ V, {{ Œî ‚ä¢w œÉ : Œì }} -> {{ Rne C in length Œî ‚Üò V }} -> {{ Œî ‚ä¢ M [ œÉ ] ‚âà V : Type@i }}) /\
          (forall Œî œÉ V, {{ Œî ‚ä¢w œÉ : Œì }} -> {{ Rne C' in length Œî ‚Üò V }} -> {{ Œî ‚ä¢ M [ œÉ ] ‚âà V : Type@i }}).


Definition neut_glu_pred Œì i (C C' : domain_ne) : glu_pred :=
  fun m M a => neut_typ_pred Œì i C C' M /\
              exists A c, a = d{{{ ‚áë A c }}} /\ per_bot c c /\
                       (forall Œî œÉ V v, {{ Œî ‚ä¢w œÉ : Œì }} ->
                                   {{ Rne C in length Œî ‚Üò V }} ->
                                   {{ Rne c in length Œî ‚Üò v }} ->
                                   {{ Œî ‚ä¢ m [ œÉ ] ‚âà v : M [ œÉ ] }}) /\
                       (forall Œî œÉ V v, {{ Œî ‚ä¢w œÉ : Œì }} ->
                                   {{ Rne C' in length Œî ‚Üò V }} ->
                                   {{ Rne c in length Œî ‚Üò v }} ->
                                   {{ Œî ‚ä¢ m [ œÉ ] ‚âà v : M [ œÉ ] }}).

Section Gluing.
  Variable
    (i : nat)
      (glu_univ_rec : forall {j}, j < i -> relation domain)
      (glu_univ_typ_rec : forall {j}, j < i -> typ_pred).

  Definition univ_glu_pred Œì {j} (lt_j_i : j < i) : glu_pred :=
    fun m M A =>
    {{ Œì ‚ä¢ m : M }} /\ {{ Œì ‚ä¢ M ‚âà Type@j : Type@i }} /\
      glu_univ_rec lt_j_i A A /\
      glu_univ_typ_rec lt_j_i m.

  Inductive glu_univ_elem_core : ctx -> relation domain -> typ_pred -> glu_pred -> domain -> domain -> Prop :=
  | glu_univ_elem_core_univ :
    `{ forall (elem_rel : relation domain)
         typ_rel
         el_rel
         (lt_j_i : j < i),
          j = j' ->
          (elem_rel <~> glu_univ_rec lt_j_i) ->
          typ_rel <‚àô> univ_typ_pred Œì j i ->
          el_rel <‚àô> univ_glu_pred Œì lt_j_i ->
          glu_univ_elem_core Œì elem_rel typ_rel el_rel d{{{ ùïå@j }}} d{{{ ùïå@j' }}} }

  | glu_univ_elem_core_nat :
    `{ forall (elem_rel : relation domain)
         typ_rel el_rel,
          (elem_rel <~> per_nat) ->
          typ_rel <‚àô> nat_typ_pred Œì i ->
          el_rel <‚àô> nat_glu_pred Œì i ->
          glu_univ_elem_core Œì elem_rel nat_rel el_rel d{{{ ‚Ñï }}} d{{{ ‚Ñï }}} }

  (* | per_univ_elem_core_pi : *)
  (*   `{ forall (in_rel : relation domain) *)
  (*        (out_rel : forall {c c'} (equiv_c_c' : {{ Dom c ‚âà c' ‚àà in_rel }}), relation domain) *)
  (*        (elem_rel : relation domain) *)
  (*        (equiv_a_a' : {{ DF a ‚âà a' ‚àà per_univ_elem_core ‚Üò in_rel}}), *)
  (*         PER in_rel -> *)
  (*         (forall {c c'} (equiv_c_c' : {{ Dom c ‚âà c' ‚àà in_rel }}), *)
  (*             rel_mod_eval per_univ_elem_core B d{{{ p ‚Ü¶ c }}} B' d{{{ p' ‚Ü¶ c' }}} (out_rel equiv_c_c')) -> *)
  (*         (elem_rel <~> fun f f' => forall c c' (equiv_c_c' : {{ Dom c ‚âà c' ‚àà in_rel }}), rel_mod_app f c f' c' (out_rel equiv_c_c')) -> *)
      (*         {{ DF Œ† a p B ‚âà Œ† a' p' B' ‚àà per_univ_elem_core ‚Üò elem_rel }} } *)

  | glu_univ_elem_core_neut :
    `{ forall (elem_rel : relation domain)
         typ_rel el_rel,
          {{ Dom b ‚âà b' ‚àà per_bot }} ->
          (elem_rel <~> per_ne) ->
          typ_rel <‚àô> neut_typ_pred Œì i b b' ->
          el_rel <‚àô> neut_glu_pred Œì i b b' ->
          glu_univ_elem_core Œì elem_rel typ_rel el_rel d{{{ ‚áë a b }}} d{{{ ‚áë a' b' }}} }.

End Gluing.
