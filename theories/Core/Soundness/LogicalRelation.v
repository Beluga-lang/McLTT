From Coq Require Import Relation_Definitions RelationClasses.
From Mcltt Require Import Base LibTactics.
From Mcltt.Core Require Import System.Definitions Evaluation Readback PER.Definitions.
From Mcltt Require Export Domain.
From Mcltt.Core.Soundness Require Export Weakening.

Import Domain_Notations.
Global Open Scope predicate_scope.

Generalizable All Variables.

Notation "'typ_pred'" := (predicate (Tcons ctx (Tcons typ Tnil))).
Notation "'glu_pred'" := (predicate (Tcons ctx (Tcons exp (Tcons typ (Tcons domain Tnil))))).

Definition univ_typ_pred j i : typ_pred := fun Œì T => {{ Œì ‚ä¢ T ‚âà Type@j :  Type@i }}.

Inductive glu_nat : ctx -> exp -> domain -> Prop :=
| glu_nat_zero :
  `( {{ Œì ‚ä¢ m ‚âà zero : ‚Ñï }} ->
     glu_nat Œì m d{{{ zero }}} )
| glu_nat_succ :
  `( {{ Œì ‚ä¢ m ‚âà succ m' : ‚Ñï }} ->
     glu_nat Œì m' a ->
     glu_nat Œì m d{{{ succ a }}} )
| glu_nat_neut :
  `( per_bot c c ->
     (forall {Œî œÉ v}, {{ Œî ‚ä¢w œÉ : Œì }} -> {{ Rne c in length Œî ‚Üò v }} -> {{ Œî ‚ä¢ m [ œÉ ] ‚âà v : ‚Ñï }}) ->
     glu_nat Œì m d{{{ ‚áë ‚Ñï c }}} ).

Definition nat_typ_pred i : typ_pred := fun Œì M => {{ Œì ‚ä¢ M ‚âà ‚Ñï : Type@i }}.

Definition nat_glu_pred i : glu_pred := fun Œì m M a => nat_typ_pred i Œì M /\ glu_nat Œì m a.

Definition neut_typ_pred i C : typ_pred :=
  fun Œì M => {{ Œì ‚ä¢ M : Type@i }} /\
          (forall Œî œÉ V, {{ Œî ‚ä¢w œÉ : Œì }} -> {{ Rne C in length Œî ‚Üò V }} -> {{ Œî ‚ä¢ M [ œÉ ] ‚âà V : Type@i }}).

Inductive neut_glu_pred i C : glu_pred :=
| ngp_make : forall Œì m M A c,
    neut_typ_pred i C Œì M ->
    per_bot c c ->
    (forall Œî œÉ V v, {{ Œî ‚ä¢w œÉ : Œì }} ->
                {{ Rne C in length Œî ‚Üò V }} ->
                {{ Rne c in length Œî ‚Üò v }} ->
                {{ Œî ‚ä¢ m [ œÉ ] ‚âà v : M [ œÉ ] }}) ->
    neut_glu_pred i C Œì m M d{{{ ‚áë A c }}}.

Inductive pi_typ_pred i
  (IR : relation domain)
  (IP : typ_pred)
  (IEl : glu_pred)
  (OP : forall c c' (equiv_c_c' : {{ Dom c ‚âà c' ‚àà IR }}),  typ_pred) : typ_pred :=
| ptp_make : forall Œì IT OT M,
    {{ Œì ‚ä¢ M ‚âà Œ† IT OT : Type@i }} ->
    {{ Œì , IT ‚ä¢ OT : Type@i }} ->
    (forall Œî œÉ, {{ Œî ‚ä¢w œÉ : Œì }} -> IP Œî {{{ IT [ œÉ ] }}}) ->
    (forall Œî œÉ m a, {{ Œî ‚ä¢w œÉ : Œì }} -> IEl Œî m {{{ IT [ œÉ ] }}} a -> forall (Ha : IR a a), OP _ _ Ha Œî {{{ OT [ œÉ ,, m ] }}}) ->
    pi_typ_pred i IR IP IEl OP Œì M.

Inductive pi_glu_pred i
  (IR : relation domain)
  (IP : typ_pred)
  (IEl : glu_pred)
  (elem_rel : relation domain)
  (OEl : forall c c' (equiv_c_c' : {{ Dom c ‚âà c' ‚àà IR }}),  glu_pred): glu_pred :=
| pgp_make : forall Œì IT OT m M a,
    {{ Œì ‚ä¢ m : M }} ->
    elem_rel a a ->
    {{ Œì ‚ä¢ M ‚âà Œ† IT OT : Type@i }} ->
    {{ Œì , IT ‚ä¢ OT : Type@i }} ->
    (forall Œî œÉ, {{ Œî ‚ä¢w œÉ : Œì }} -> IP Œî {{{ IT [ œÉ ] }}}) ->
    (forall Œî œÉ m' b, {{ Œî ‚ä¢w œÉ : Œì }} -> IEl Œî m' {{{ IT [ œÉ ] }}} b -> forall (Ha : IR b b),
    exists ab, {{ $| a & b |‚Üò ab }} /\ OEl _ _ Ha Œî {{{ m [ œÉ ] m' }}} {{{ OT [ œÉ ,, m' ] }}} ab) ->
    pi_glu_pred i IR IP IEl elem_rel OEl Œì m M a.


Lemma pi_glu_pred_pi_typ_pred : forall i IR IP IEl (OP : forall c c' (equiv_c_c' : {{ Dom c ‚âà c' ‚àà IR }}),  typ_pred) elem_rel OEl Œì m M a,
    pi_glu_pred i IR IP IEl elem_rel OEl Œì m M a ->
    (forall Œî m' M' b c c' (Hc : IR c c'), OEl _ _ Hc Œî m' M' b -> OP _ _ Hc Œî M') ->
    pi_typ_pred i IR IP IEl OP Œì M.
Proof.
  inversion_clear 1; econstructor; eauto.
  intros.
  edestruct H5 as [? []]; eauto.
Qed.

Section Gluing.
  Variable
    (i : nat)
      (glu_univ_rec : forall {j}, j < i -> relation domain)
      (glu_univ_typ_rec : forall {j}, j < i -> typ_pred).

  Definition univ_glu_pred {j} (lt_j_i : j < i) : glu_pred :=
    fun Œì m M A =>
    {{ Œì ‚ä¢ m : M }} /\ {{ Œì ‚ä¢ M ‚âà Type@j : Type@i }} /\
      glu_univ_rec lt_j_i A A /\
      glu_univ_typ_rec lt_j_i Œì m.

  Inductive glu_univ_elem_core : typ_pred -> glu_pred -> relation domain -> domain -> domain -> Prop :=
  | glu_univ_elem_core_univ :
    `{ forall (elem_rel : relation domain)
         typ_rel
         el_rel
         (lt_j_i : j < i),
          j = j' ->
          (elem_rel <~> glu_univ_rec lt_j_i) ->
          typ_rel <‚àô> univ_typ_pred j i ->
          el_rel <‚àô> univ_glu_pred lt_j_i ->
          glu_univ_elem_core typ_rel el_rel elem_rel d{{{ ùïå@j }}} d{{{ ùïå@j' }}} }

  | glu_univ_elem_core_nat :
    `{ forall (elem_rel : relation domain)
         typ_rel el_rel,
          (elem_rel <~> per_nat) ->
          typ_rel <‚àô> nat_typ_pred i ->
          el_rel <‚àô> nat_glu_pred i ->
          glu_univ_elem_core nat_rel el_rel elem_rel d{{{ ‚Ñï }}} d{{{ ‚Ñï }}} }

  | glu_univ_elem_core_pi :
    `{ forall (in_rel : relation domain)
         IP IEl
         (out_rel : forall {c c'} (equiv_c_c' : {{ Dom c ‚âà c' ‚àà in_rel }}), relation domain)
         (OP : forall c c' (equiv_c_c' : {{ Dom c ‚âà c' ‚àà in_rel }}), typ_pred)
         (OEl : forall c c' (equiv_c_c' : {{ Dom c ‚âà c' ‚àà in_rel }}), glu_pred)
         typ_rel el_rel
         (elem_rel : relation domain),
          glu_univ_elem_core IP IEl in_rel a a' ->
          (forall {c c'} (equiv_c_c' : {{ Dom c ‚âà c' ‚àà in_rel }}),
              rel_mod_eval (glu_univ_elem_core (OP _ _ equiv_c_c') (OEl _ _ equiv_c_c'))
                B d{{{ p ‚Ü¶ c }}} B' d{{{ p' ‚Ü¶ c' }}}
                (out_rel equiv_c_c')) ->
          (elem_rel <~> fun f f' => forall c c' (equiv_c_c' : {{ Dom c ‚âà c' ‚àà in_rel }}), rel_mod_app f c f' c' (out_rel equiv_c_c')) ->
          typ_rel <‚àô> pi_typ_pred i in_rel IP IEl OP ->
          el_rel <‚àô> pi_glu_pred i in_rel IP IEl elem_rel OEl ->
          glu_univ_elem_core typ_rel el_rel elem_rel d{{{ Œ† a p B }}} d{{{ Œ† a' p' B' }}} }

  | glu_univ_elem_core_neut :
    `{ forall (elem_rel : relation domain)
         typ_rel el_rel,
          {{ Dom b ‚âà b' ‚àà per_bot }} ->
          (elem_rel <~> per_ne) ->
          typ_rel <‚àô> neut_typ_pred i b ->
          el_rel <‚àô> neut_glu_pred i b ->
          glu_univ_elem_core typ_rel el_rel elem_rel d{{{ ‚áë a b }}} d{{{ ‚áë a' b' }}} }.

End Gluing.
