prog: INT COLON INT SUCC
##
## Ends in an error in state: 50.
##
## prog -> obj COLON obj . EOF [ # ]
##
## The known suffix of the stack is as follows:
## obj COLON obj
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 22, spurious reduction of production obj -> app_obj
##

Either an expression or the end of file is expected.
This token is invalid for the beginning of an expression.

prog: RPAREN
##
## Ends in an error in state: 0.
##
## prog' -> . prog [ # ]
##
## The known suffix of the stack is as follows:
##
##

This token is invalid for the beginning of a program.

prog: TYPE ZERO
##
## Ends in an error in state: 3.
##
## atomic_obj -> TYPE . AT INT [ ZERO VAR TYPE RPAREN RETURN NAT LPAREN INT EOF END COLON BAR ]
##
## The known suffix of the stack is as follows:
## TYPE
##

"Type" requires "@<level>".

prog: TYPE AT ZERO
##
## Ends in an error in state: 4.
##
## atomic_obj -> TYPE AT . INT [ ZERO VAR TYPE RPAREN RETURN NAT LPAREN INT EOF END COLON BAR ]
##
## The known suffix of the stack is as follows:
## TYPE AT
##

"Type" requires "@?level", where "?level" is an arabic numeral.

prog: SUCC RPAREN
##
## Ends in an error in state: 6.
##
## obj -> SUCC . obj [ RPAREN RETURN EOF END COLON BAR ]
##
## The known suffix of the stack is as follows:
## SUCC
##

An expression is expected after "succ".
This token is invalid for the beginning of an expression.

prog: REC RPAREN
##
## Ends in an error in state: 7.
##
## obj -> REC . obj RETURN VAR ARROW obj BAR ZERO DARROW obj BAR SUCC VAR COMMA VAR DARROW obj END [ RPAREN RETURN EOF END COLON BAR ]
##
## The known suffix of the stack is as follows:
## REC
##

An expression is expected after "rec".
This token is invalid for the beginning of an expression.

prog: LAMBDA ZERO
##
## Ends in an error in state: 15.
##
## obj -> fnbinder . params ARROW obj [ RPAREN RETURN EOF END COLON BAR ]
##
## The known suffix of the stack is as follows:
## fnbinder
##

"forall" requires a list of parenthesized parameters.
For example,
  "(x : Nat) (y : Nat)" in "forall (x : Nat) (y : Nat) -> Nat"

prog: LAMBDA LPAREN ZERO
##
## Ends in an error in state: 16.
##
## param -> LPAREN . VAR COLON obj RPAREN [ LPAREN ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

A parameter should start with a valid identifier.

prog: LAMBDA LPAREN VAR ZERO
##
## Ends in an error in state: 17.
##
## param -> LPAREN VAR . COLON obj RPAREN [ LPAREN ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN VAR
##

A parameter should have ": ?type" after the parameter name,
where "?type" is the type of the parameter.

prog: LAMBDA LPAREN VAR COLON RPAREN
##
## Ends in an error in state: 18.
##
## param -> LPAREN VAR COLON . obj RPAREN [ LPAREN ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN VAR COLON
##

A parameter should have "?type" after ":",
where "?type" is the type of the parameter.

prog: LPAREN RPAREN
##
## Ends in an error in state: 10.
##
## atomic_obj -> LPAREN . obj RPAREN [ ZERO VAR TYPE RPAREN RETURN NAT LPAREN INT EOF END COLON BAR ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

"()" is an invalid expression.
"()" should have an expression in it to be an expression.

prog: LPAREN INT DARROW
##
## Ends in an error in state: 13.
##
## atomic_obj -> LPAREN obj . RPAREN [ ZERO VAR TYPE RPAREN RETURN NAT LPAREN INT EOF END COLON BAR ]
##
## The known suffix of the stack is as follows:
## LPAREN obj
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 22, spurious reduction of production obj -> app_obj
##

Either an expression or ")" is expected.
This token is invalid for the beginning of an expression.

prog: LAMBDA LPAREN VAR COLON INT DARROW
##
## Ends in an error in state: 19.
##
## param -> LPAREN VAR COLON obj . RPAREN [ LPAREN ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN VAR COLON obj
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 22, spurious reduction of production obj -> app_obj
##

Either an expression or ")" is expected.
This token is invalid for the beginning of an expression.

prog: LAMBDA LPAREN VAR COLON INT RPAREN ZERO
##
## Ends in an error in state: 24.
##
## obj -> fnbinder params . ARROW obj [ RPAREN RETURN EOF END COLON BAR ]
## params -> params . param [ LPAREN ARROW ]
##
## The known suffix of the stack is as follows:
## fnbinder params
##

"->" or another parameter is expected after a list of parameters for "fun".

prog: LAMBDA LPAREN VAR COLON INT RPAREN ARROW RPAREN
##
## Ends in an error in state: 25.
##
## obj -> fnbinder params ARROW . obj [ RPAREN RETURN EOF END COLON BAR ]
##
## The known suffix of the stack is as follows:
## fnbinder params ARROW
##

An expression is expected after "->".
This token is invalid for the beginning of an expression.

prog: REC INT DARROW
##
## Ends in an error in state: 29.
##
## obj -> REC obj . RETURN VAR ARROW obj BAR ZERO DARROW obj BAR SUCC VAR COMMA VAR DARROW obj END [ RPAREN RETURN EOF END COLON BAR ]
##
## The known suffix of the stack is as follows:
## REC obj
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 22, spurious reduction of production obj -> app_obj
##

Either an expression or "return" keyword is expected.
This token is invalid for the beginning of an expression.

prog: REC INT RETURN ZERO
##
## Ends in an error in state: 30.
##
## obj -> REC obj RETURN . VAR ARROW obj BAR ZERO DARROW obj BAR SUCC VAR COMMA VAR DARROW obj END [ RPAREN RETURN EOF END COLON BAR ]
##
## The known suffix of the stack is as follows:
## REC obj RETURN
##

A motif should start with a valid identifier.

prog: REC INT RETURN VAR ZERO
##
## Ends in an error in state: 31.
##
## obj -> REC obj RETURN VAR . ARROW obj BAR ZERO DARROW obj BAR SUCC VAR COMMA VAR DARROW obj END [ RPAREN RETURN EOF END COLON BAR ]
##
## The known suffix of the stack is as follows:
## REC obj RETURN VAR
##

A motif should have "->" after the scrutinee name.

prog: REC INT RETURN VAR ARROW RPAREN
##
## Ends in an error in state: 32.
##
## obj -> REC obj RETURN VAR ARROW . obj BAR ZERO DARROW obj BAR SUCC VAR COMMA VAR DARROW obj END [ RPAREN RETURN EOF END COLON BAR ]
##
## The known suffix of the stack is as follows:
## REC obj RETURN VAR ARROW
##

An expression is expected for a motif.
This token is invalid for the beginning of an expression.

prog: REC INT RETURN VAR ARROW INT DARROW
##
## Ends in an error in state: 33.
##
## obj -> REC obj RETURN VAR ARROW obj . BAR ZERO DARROW obj BAR SUCC VAR COMMA VAR DARROW obj END [ RPAREN RETURN EOF END COLON BAR ]
##
## The known suffix of the stack is as follows:
## REC obj RETURN VAR ARROW obj
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 22, spurious reduction of production obj -> app_obj
##

Either an expression or "|" is expected.
This token is invalid for the beginning of an expression.

prog: REC INT RETURN VAR ARROW INT BAR VAR
##
## Ends in an error in state: 34.
##
## obj -> REC obj RETURN VAR ARROW obj BAR . ZERO DARROW obj BAR SUCC VAR COMMA VAR DARROW obj END [ RPAREN RETURN EOF END COLON BAR ]
##
## The known suffix of the stack is as follows:
## REC obj RETURN VAR ARROW obj BAR
##

"zero" is expected for the first branch of "rec".

prog: REC INT RETURN VAR ARROW INT BAR ZERO ZERO
##
## Ends in an error in state: 35.
##
## obj -> REC obj RETURN VAR ARROW obj BAR ZERO . DARROW obj BAR SUCC VAR COMMA VAR DARROW obj END [ RPAREN RETURN EOF END COLON BAR ]
##
## The known suffix of the stack is as follows:
## REC obj RETURN VAR ARROW obj BAR ZERO
##

"=>" is expected after a pattern for "rec".

prog: REC INT RETURN VAR ARROW INT BAR ZERO DARROW RPAREN
##
## Ends in an error in state: 36.
##
## obj -> REC obj RETURN VAR ARROW obj BAR ZERO DARROW . obj BAR SUCC VAR COMMA VAR DARROW obj END [ RPAREN RETURN EOF END COLON BAR ]
##
## The known suffix of the stack is as follows:
## REC obj RETURN VAR ARROW obj BAR ZERO DARROW
##

An expression is expected.
This token is invalid for the beginning of an expression.

prog: REC INT RETURN VAR ARROW INT BAR ZERO DARROW INT DARROW
##
## Ends in an error in state: 37.
##
## obj -> REC obj RETURN VAR ARROW obj BAR ZERO DARROW obj . BAR SUCC VAR COMMA VAR DARROW obj END [ RPAREN RETURN EOF END COLON BAR ]
##
## The known suffix of the stack is as follows:
## REC obj RETURN VAR ARROW obj BAR ZERO DARROW obj
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 22, spurious reduction of production obj -> app_obj
##

Either an expression or "|" is expected.
This token is invalid for the beginning of an expression.

prog: REC INT RETURN VAR ARROW INT BAR ZERO DARROW INT BAR ZERO
##
## Ends in an error in state: 38.
##
## obj -> REC obj RETURN VAR ARROW obj BAR ZERO DARROW obj BAR . SUCC VAR COMMA VAR DARROW obj END [ RPAREN RETURN EOF END COLON BAR ]
##
## The known suffix of the stack is as follows:
## REC obj RETURN VAR ARROW obj BAR ZERO DARROW obj BAR
##

"succ" is expected for the second branch of "rec".

prog: REC INT RETURN VAR ARROW INT BAR ZERO DARROW INT BAR SUCC ZERO
##
## Ends in an error in state: 39.
##
## obj -> REC obj RETURN VAR ARROW obj BAR ZERO DARROW obj BAR SUCC . VAR COMMA VAR DARROW obj END [ RPAREN RETURN EOF END COLON BAR ]
##
## The known suffix of the stack is as follows:
## REC obj RETURN VAR ARROW obj BAR ZERO DARROW obj BAR SUCC
##

An identifier for the predecessor of the scrutinee is expected.

prog: REC INT RETURN VAR ARROW INT BAR ZERO DARROW INT BAR SUCC VAR ZERO
##
## Ends in an error in state: 40.
##
## obj -> REC obj RETURN VAR ARROW obj BAR ZERO DARROW obj BAR SUCC VAR . COMMA VAR DARROW obj END [ RPAREN RETURN EOF END COLON BAR ]
##
## The known suffix of the stack is as follows:
## REC obj RETURN VAR ARROW obj BAR ZERO DARROW obj BAR SUCC VAR
##

"," is expected after "succ ?x".

prog: REC INT RETURN VAR ARROW INT BAR ZERO DARROW INT BAR SUCC VAR COMMA ZERO
##
## Ends in an error in state: 41.
##
## obj -> REC obj RETURN VAR ARROW obj BAR ZERO DARROW obj BAR SUCC VAR COMMA . VAR DARROW obj END [ RPAREN RETURN EOF END COLON BAR ]
##
## The known suffix of the stack is as follows:
## REC obj RETURN VAR ARROW obj BAR ZERO DARROW obj BAR SUCC VAR COMMA
##

An identifier for the recursion result is expected.

prog: REC INT RETURN VAR ARROW INT BAR ZERO DARROW INT BAR SUCC VAR COMMA VAR ZERO
##
## Ends in an error in state: 42.
##
## obj -> REC obj RETURN VAR ARROW obj BAR ZERO DARROW obj BAR SUCC VAR COMMA VAR . DARROW obj END [ RPAREN RETURN EOF END COLON BAR ]
##
## The known suffix of the stack is as follows:
## REC obj RETURN VAR ARROW obj BAR ZERO DARROW obj BAR SUCC VAR COMMA VAR
##

"=>" is expected after a pattern for "rec".

prog: REC INT RETURN VAR ARROW INT BAR ZERO DARROW INT BAR SUCC VAR COMMA VAR DARROW RPAREN
##
## Ends in an error in state: 43.
##
## obj -> REC obj RETURN VAR ARROW obj BAR ZERO DARROW obj BAR SUCC VAR COMMA VAR DARROW . obj END [ RPAREN RETURN EOF END COLON BAR ]
##
## The known suffix of the stack is as follows:
## REC obj RETURN VAR ARROW obj BAR ZERO DARROW obj BAR SUCC VAR COMMA VAR DARROW
##

An expression is expected.
This token is invalid for the beginning of an expression.

prog: REC INT RETURN VAR ARROW INT BAR ZERO DARROW INT BAR SUCC VAR COMMA VAR DARROW INT DARROW
##
## Ends in an error in state: 44.
##
## obj -> REC obj RETURN VAR ARROW obj BAR ZERO DARROW obj BAR SUCC VAR COMMA VAR DARROW obj . END [ RPAREN RETURN EOF END COLON BAR ]
##
## The known suffix of the stack is as follows:
## REC obj RETURN VAR ARROW obj BAR ZERO DARROW obj BAR SUCC VAR COMMA VAR DARROW obj
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 22, spurious reduction of production obj -> app_obj
##

Either an expression or "end" is expected.
This token is invalid for the beginning of an expression.

prog: INT DARROW
##
## Ends in an error in state: 48.
##
## prog -> obj . COLON obj EOF [ # ]
##
## The known suffix of the stack is as follows:
## obj
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 22, spurious reduction of production obj -> app_obj
##

Either an expression or ":" is expected.
This token is invalid for the beginning of an expression.

prog: INT COLON RPAREN
##
## Ends in an error in state: 49.
##
## prog -> obj COLON . obj EOF [ # ]
##
## The known suffix of the stack is as follows:
## obj COLON
##

An expression is expected.
This token is invalid for the beginning of an expression.