let ((Nary : forall (n : Nat) -> Type@0) :=
     (
       fun (n : Nat)
         -> rec n return y . Type@0
            | zero => Nat
            | succ m, r => forall (a : Nat) -> r
            end
     ))
     
    ((toNat : forall (f : Nary 0) -> Nat) :=
     (
       fun (f : Nat) -> f
     ))
     
    ((appNary : forall (n : Nat) (f : Nary (succ n)) (arg : Nat) -> Nary n) :=
     (
       fun (n : Nat)
           (f : rec succ n return y . Type@0
                | zero => Nat
           	| succ m, r => forall (a : Nat) -> r
           	end)
           (arg : Nat)
         -> f arg
     ))

    ((n : Nat) := 3)
    ((f : Nary n) :=
     (
       (fun (add : forall (a : Nat) (b : Nat) -> Nat) -> (fun (a : Nat) (b : Nat) (c : Nat) -> add a (add b c)))
       (
         fun (a : Nat)
             (b : Nat)
      	   -> rec a return y . Nat
              | zero => b
              | succ m, r => succ r
              end
       )
     ))

in
  ((rec n return y . (forall (g : Nary y) -> Nat)
       | zero => toNat
       | succ m, r => fun (g : Nary (succ m)) -> r (appNary m g (succ m))
       end) f) : Nat