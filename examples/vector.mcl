(
  (* Main example *)
  (
    fun (Vec : forall (A : Type@0) (n : Nat) -> Type@2)
        (nil : forall (A : Type@0) -> Vec A 0)
        (cons : forall (A : Type@0) (n : Nat) (head : A) (tail : Vec A n) -> Vec A (succ n))
        (vecRec : forall (A : Type@0) (n : Nat) (vec : Vec A n) (C : forall (l : Nat) -> Type@1) (nil : C 0) (cons : forall (l : Nat) (a : A) (r : C l) -> C (succ l)) -> C n) ->
      (
        fun (totalHead : forall (A : Type@0) (n : Nat) (vec : Vec A (succ n)) -> A)
            (vec : Vec (forall (n : Nat) -> Nat) 3) ->
          totalHead ((forall (n : Nat) -> Nat)) 2 vec 4
      )
      (* total head function *)
      (
        fun (A : Type@0) (n : Nat) (vec : Vec A (succ n)) ->
          vecRec A (succ n) vec (fun (l : Nat) -> rec l return r . Type@0 | zero => Nat | succ l, r => A end) 0 (fun (l : Nat) (a : A) (r : rec l return r . Type@0 | zero => Nat | succ l, r => A end) -> a)
      )
      (* example vector *)
      (
        cons (forall (n : Nat) -> Nat) 2
          (fun (n : Nat) -> succ (succ (succ n)))
          (
            cons (forall (n : Nat) -> Nat) 1
              (fun (n : Nat) -> succ n)
              (
                cons (forall (n : Nat) -> Nat) 0
                  (fun (n : Nat) -> succ (succ n))
                  (nil (forall (n : Nat) -> Nat))
              )
          )
      )
  )
  (* Church vector *)
  (fun (A : Type@0) (n : Nat) -> forall (C : forall (l : Nat) -> Type@1) (nil : C 0) (cons : forall (l : Nat) (a : A) (r : C l) -> C (succ l)) -> C n)
  (* Church vector nil *)
  (fun (A : Type@0) (C : forall (l : Nat) -> Type@1) (nil : C 0) (cons : forall (l : Nat) (a : A) (r : C l) -> C (succ l)) -> nil)
  (* Church vector cons *)
  (fun (A : Type@0) (n : Nat) (head : A) (tail : forall (C : forall (l : Nat) -> Type@1) (nil : C 0) (cons : forall (l : Nat) (a : A) (r : C l) -> C (succ l)) -> C n) (C : forall (l : Nat) -> Type@1) (nil : C 0) (cons : forall (l : Nat) (a : A) (r : C l) -> C (succ l)) -> cons n head (tail C nil cons))
  (* Church vector recursor *)
  (fun (A : Type@0) (n : Nat) (vec : forall (C : forall (l : Nat) -> Type@1) (nil : C 0) (cons : forall (l : Nat) (a : A) (r : C l) -> C (succ l)) -> C n) (C : forall (l : Nat) -> Type@1) (nil : C 0) (cons : forall (l : Nat) (a : A) (r : C l) -> C (succ l)) -> vec C nil cons)
) : Nat
